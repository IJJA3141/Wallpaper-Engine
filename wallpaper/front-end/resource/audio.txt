import { skinnyBar } from "./percentageBar.js";
import { rectagle } from "./rectagle.js";

declare global {
  interface Window {
    wallpaperRegisterMediaPropertiesListener: any;
    wallpaperRegisterMediaThumbnailListener: any;
    wallpaperRegisterMediaPlaybackListener: any;
    wallpaperRegisterMediaTimelineListener: any;
    wallpaperRegisterAudioListener: any;
    wallpaperPropertyListener: any;
    wallpaperMediaIntegration: any;
  }
}

interface propertiesEvent {
  title: string;
  artist: string;
  subTitle: string;
  albumTitle: string;
  albumArtist: string;
  genres: string;
}

interface thumbnailEvent {
  thumbnail: string;
  primaryColor: string;
  secondaryColor: string;
  tertiaryColor: string;
  textColor: string;
  highContrastColor: string;
}

interface mediaPlaybackEvent {
  state: any;
}

interface mediaTimelineEvent {
  position: number;
  duration: number;
}

window.wallpaperPropertyListener;
class audioBox {
  obj: Element;
  rasio: number;

  divImage: HTMLDivElement;
  image: HTMLImageElement;

  uiDiv: HTMLDivElement;

  audioVisualizationDiv: HTMLDivElement;
  audioVisualization: HTMLCanvasElement;
  audioVisualizationCtx: CanvasRenderingContext2D | null;

  bar: skinnyBar;

  textDiv: HTMLDivElement;
  text: HTMLParagraphElement;
  subText: HTMLParagraphElement;

  currentAudioDuration: number;

  private wallpaperMediaPropertiesListener: Function;
  private wallpaperMediaThumbnailListener: Function;
  private wallpaperMediaPlaybackListener: Function;
  private wallpaperMediaTimelineListener: Function;

  private wallpaperAudioListener: Function;

  private _width: number;
  private _height: number;
  private _x: number;
  private _y: number;

  constructor(rect: rectagle) {
    //////create elements
    this.obj = document.createElement("div");

    this.divImage = document.createElement("div");
    this.image = document.createElement("img");

    this.uiDiv = document.createElement("div");

    this.audioVisualizationDiv = document.createElement("div");
    this.audioVisualization = document.createElement("canvas");

    this.bar = new skinnyBar("audioBar");

    this.textDiv = document.createElement("div");
    this.text = document.createElement("p");
    this.subText = document.createElement("p");
    //////end create elements
    //////
    //////
    //////add attribute
    this._width = rect.width;
    this._height = rect.height;
    this._x = rect.left;
    this._y = rect.top;

    this.resize();

    this.obj.className = "div";

    this.divImage.className = "divAudioImage";
    this.image.className = "audioImage";

    this.uiDiv.className = "audioUi";

    this.audioVisualizationDiv.className = "audioVisualizationDiv";
    this.audioVisualization.className = "audioVisualization";

    this.textDiv.className = "audioTextDiv";
    this.text.className = "audioText";
    this.subText.className = "audioSubText";

    //////end add attribute
    //////
    //////
    //////create functions
    this.wallpaperMediaPropertiesListener = (event: propertiesEvent) => {
      this.text.innerText = event.title;
      this.subText.innerText = event.artist;
    };

    this.wallpaperMediaThumbnailListener = (event: thumbnailEvent) => {
      let src: string = event.thumbnail;
      if (src == "data:image/png;base64,") {
        console.log("no valid image");
        src = "./img/L.png";
      } else {
        console.log("image is valid");
      }
      this.image.src = src;
    };

    this.wallpaperMediaPlaybackListener = (event: mediaPlaybackEvent) => {
      if (event.state == window.wallpaperMediaIntegration.playback.PLAYING) {
      } else {
        ("change anim");
      }
    };

    this.wallpaperMediaTimelineListener = (event: mediaTimelineEvent) => {
      if (this.currentAudioDuration != event.duration) {
        ("change bar number");
        this.currentAudioDuration = event.duration;
      }
    };
    //////end create functions
    //////
    //////
    //////listener
    window.wallpaperRegisterMediaPropertiesListener(
      this.wallpaperMediaPropertiesListener
    );
    window.wallpaperRegisterMediaThumbnailListener(
      this.wallpaperMediaThumbnailListener
    );
    window.wallpaperRegisterMediaPlaybackListener(
      this.wallpaperMediaPlaybackListener
    );
    window.wallpaperRegisterMediaTimelineListener(
      this.wallpaperMediaTimelineListener
    );
    this.image.addEventListener("load", this.resize);
    //////end listener
    //////
    //////
    //////canvas
    this.wallpaperAudioListener = (audioArray: Array<number>) => {
      //Clear the canvas and set it to black
      this.audioVisualizationCtx.fillStyle = "rgb(253, 238, 215)";
      this.audioVisualizationCtx?.fillRect(
        0,
        0,
        this.audioVisualization.width,
        this.audioVisualization.height
      );

      // Render bars along the full width of the canvas
      var barWidth = Math.round((1.0 / 64) * this.audioVisualization.width);

      // Begin with the left channel in red
      this.audioVisualizationCtx.fillStyle = "rgb(176, 205, 66)";
      // Iterate over the first 64 array elements (0 - 63) for the left channel audio data
      for (var i = 0; i < audioArray.length; i += 2) {
        // Create an audio bar with its hight depending on the audio volume level of the current frequency
        var height =
          this.audioVisualization.height * Math.min(audioArray[i], 1) * 2 * 3;
        this.audioVisualizationCtx?.fillRect(
          barWidth * i,
          (this.audioVisualization.height - height) / 2,
          barWidth,
          height
        );
      }
    };
    window.wallpaperRegisterAudioListener(this.wallpaperAudioListener);
    this.audioVisualizationCtx = this.audioVisualization.getContext("2d");
    //////end canvas
    //////
    //////
    //////add child
    this.divImage.appendChild(this.image);

    this.audioVisualizationDiv.appendChild(this.audioVisualization);
    this.textDiv.appendChild(this.subText);
    this.textDiv.appendChild(this.text);

    this.uiDiv.appendChild(this.audioVisualizationDiv);
    this.uiDiv.appendChild(this.bar.tout);
    this.uiDiv.appendChild(this.textDiv);

    this.obj.appendChild(this.divImage);
    this.obj.appendChild(this.uiDiv);
    //////end add child
  }

  private resize() {
    console.log("start resize")

    this.rasio = this._width / this._height;

    console.log(
      "style",
      "width: " +
        this._width +
        "px; height: " +
        this._height +
        "px; left:" +
        this._x +
        "px; top:" +
        this._y +
        "px;"
    );
    this.obj.setAttribute(
      "style",
      "width: " +
        this._width +
        "px; height: " +
        this._height +
        "px; left:" +
        this._x +
        "px; top:" +
        this._y +
        "px;"
    );

    if (this.rasio <= 1) {
      this.divImage.setAttribute("style", "width: 100%;");
    } else {
      this.divImage.setAttribute("style", "height: 100%;");
    }
    //////
    //////
    //////
    //////start image resize
    this.image.setAttribute("style", "")
    let width: number = this.image.naturalWidth;
    let height: number = this.image.naturalHeight;
    console.log(width, height);
    let inset: number = 10;
    if (width === 0 || height === 0) {
      return;
    }
    let ratio: number = width / height;
    console.log(ratio);

    if (this.rasio <= 1) {
      if (ratio <= 1) {
        console.log(ratio + "<= 1");

        this.image.setAttribute(
          "style",
          "left: " +
            Math.round(
              (this._width - (80 / 100) * (45 / 100) * this._height * ratio) / 2
            ) +
            "px; right: auto; top: 10%; bottom: 10%; height: 80%; aspect-ratio: " +
            ratio +
            ";"
        );
      } else {
        console.log(ratio + "> 1");
        console.log(((80 / 100) * this._width) / ratio);
        this.image.setAttribute(
          "style",
          "top: " +
            Math.round(
              ((this._height * 45) / 100 - ((80 / 100) * this._width) / ratio) / 2
            ) +
            "px; bottom: auto; left: 10%; right: 10%; width: 80%; aspect-ratio: " +
            ratio +
            ";"
        );
      }
    } else {
      this.image.setAttribute(
        "style",
        "left: " +
          inset +
          "%; top: " +
          inset +
          "%; bottom: " +
          inset +
          "%; height: " +
          (100 - inset * 2) +
          "%; aspect-ratio:" +
          ratio +
          ";"
      );
    }

    console.log("end resize")
  }

  set width(value: number) {
    console.log("?");
    this._width = Math.round(
      (value * document.getElementById("desktop").clientWidth) / 100
    );
    this.resize();
    return;
  }
  set height(value: number) {
    this._height = Math.round(
      (value * document.getElementById("desktop").clientHeight) / 100
    );
    this.resize();
  }
  set x(value: number) {
    this._x = Math.round(
      (value * (document.getElementById("desktop").clientWidth - this._width)) /
        100
    );
    this.resize();
    return;
  }
  set y(value: number) {
    this._y = Math.round(
      (value *
        (document.getElementById("desktop").clientHeight - this._height)) /
        100
    );
    this.resize();
    return;
  }
}

export { audioBox };
